# UI Main Thread Blocking Detection Anchor (Flutter)

metadata:
  id: ui_main_thread_perf
  title: 主线程耗时检测与优化（Flutter）
  module: ui
  tags: [main_thread, jank, blocking, performance, compute, isolate, flutter]

summary:
  - Flutter UI 构建和渲染默认运行在主线程，阻塞将引发卡顿
  - 应将耗时任务如 JSON 解析、复杂逻辑移至 Isolate 中处理
  - 使用 FrameCallback 和 Timeline 排查主线程异常

patterns:
  - 使用 compute() 调用分线程异步计算任务
  - 使用 Future.microtask、Isolate.spawn 优化延迟执行
  - 利用 Timeline + DevTools 标注主线程卡点

kpi:
  - 单帧执行时间 < 16.67ms
  - 主线程任务时长 > 8ms 提醒优化
  - 渲染过程 GC 时间占比 < 5%

tools:
  - DevTools → Performance → Frame Timeline 检测卡顿点
  - timeline_summary.json 解析构建耗时
  - 使用 dart:developer log + Chrome tracing
