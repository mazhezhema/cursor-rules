# General Frontend Architecture Guideline

## 技术栈原则
- 使用Flutter 3.x，Dart语言
- 所有布局使用 `Widget` 组件进行组合
- 使用 Riverpod 做状态管理，提供模块隔离与全局可控状态源
- 使用 go_router 实现页面路由跳转与参数传递
- 所有异步操作统一使用 `async/await`，禁止嵌套回调

## 项目结构
```
lib/
  ├── main.dart               // 启动入口
  ├── app/                   // 全局配置（主题、语言、多环境等）
  ├── core/                  // 核心模块（API封装、通用工具）
  ├── features/              // 各业务模块（按页面划分）
  │    ├── home/
  │    ├── profile/
  │    └── ...
  ├── shared/                // 可复用组件、样式、模型等
  └── services/              // 第三方SDK封装、接口适配层
```

## 命名规范
- 页面：`xxx_page.dart`，例如：`home_page.dart`
- 控制器：`xxx_controller.dart`
- 模型：`xxx_model.dart`
- UI组件：`xxx_card.dart`, `xxx_tile.dart`

## 模块划分原则
- 所有页面 UI 与逻辑强制解耦
- 页面 → 调用 controller → controller 处理数据 → repository/接口 → 回传结果
- 避免页面直接处理逻辑

## UI交互统一规则
- 所有按钮加入 loading 状态处理
- 所有网络失败提示 toast/error widget
- 所有用户可见异常均应 log 到日志系统（后续统一）

## 文件分层原则
- 页面不应超过 300 行
- controller 不应直接操作 UI
- 每个页面建议有独立的 model/controller
